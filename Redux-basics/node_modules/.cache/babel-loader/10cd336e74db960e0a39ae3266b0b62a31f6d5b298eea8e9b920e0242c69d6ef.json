{"ast":null,"code":"import { createStore } from \"redux\";\nimport { createSlice } from \"@reduxjs/toolkit\";\nconst initialCounterState = {\n  counter: 0,\n  showCounter: true\n};\nconst counterSlice = createSlice({\n  name: \"counter\",\n  initialState: initialCounterState,\n  reducers: {\n    increment(state) {\n      state.counter++;\n    },\n    decrement(state) {\n      state.counter--;\n    },\n    increase(state, action) {\n      state.counter = state.counter + action.payload;\n    },\n    toggle(state) {\n      state.showCounter = !state.showCounter;\n    }\n  }\n});\nconst initialAuthState = {\n  isAuthenticate: false\n};\nconst authSlice = createSlice({\n  name: \"authentification\",\n  initialState: initialAuthState,\n  reducers: {\n    login(state) {\n      state.isAuthenticate = true;\n    },\n    logout(state) {\n      state.isAuthenticate = false;\n    }\n  }\n});\nconst counterReducer = (state = initialState, action) => {\n  if (action.type === \"increment\") {\n    return {\n      counter: state.counter + 1,\n      showCounter: state.showCounter\n    };\n  }\n  if (action.type === \"increase\") {\n    return {\n      counter: state.counter + action.amount,\n      showCounter: state.showCounter\n    };\n  }\n  if (action.type === \"decrement\") {\n    return {\n      counter: state.counter - 1,\n      showCounter: state.showCounter\n    };\n  }\n  if (action.type === \"toggle\") {\n    return {\n      counter: state.counter,\n      showCounter: !state.showCounter\n    };\n  }\n  return state;\n};\nconst store = createStore({\n  counter: counterSlice.reducer,\n  auth: authSlice.reducer\n});\nexport const counterActions = counterSlice.actions;\nexport const authActions = authSlice.actions;\nexport default store;","map":{"version":3,"names":["createStore","createSlice","initialCounterState","counter","showCounter","counterSlice","name","initialState","reducers","increment","state","decrement","increase","action","payload","toggle","initialAuthState","isAuthenticate","authSlice","login","logout","counterReducer","type","amount","store","reducer","auth","counterActions","actions","authActions"],"sources":["C:/Users/PC/Desktop/Udemy React Course/Redux-Basics/src/store/index.js"],"sourcesContent":["import { createStore } from \"redux\";\r\nimport { createSlice } from \"@reduxjs/toolkit\";\r\nconst initialCounterState = { counter: 0, showCounter: true };\r\nconst counterSlice = createSlice({\r\n  name: \"counter\",\r\n  initialState: initialCounterState,\r\n  reducers: {\r\n    increment(state) {\r\n      state.counter++;\r\n    },\r\n    decrement(state) {\r\n      state.counter--;\r\n    },\r\n    increase(state, action) {\r\n      state.counter = state.counter + action.payload;\r\n    },\r\n    toggle(state) {\r\n      state.showCounter = !state.showCounter;\r\n    },\r\n  },\r\n});\r\nconst initialAuthState = { isAuthenticate: false };\r\nconst authSlice = createSlice({\r\n  name: \"authentification\",\r\n  initialState: initialAuthState,\r\n  reducers: {\r\n    login(state) {\r\n      state.isAuthenticate = true;\r\n    },\r\n    logout(state) {\r\n      state.isAuthenticate = false;\r\n    },\r\n  },\r\n});\r\nconst counterReducer = (state = initialState, action) => {\r\n  if (action.type === \"increment\") {\r\n    return {\r\n      counter: state.counter + 1,\r\n      showCounter: state.showCounter,\r\n    };\r\n  }\r\n  if (action.type === \"increase\") {\r\n    return {\r\n      counter: state.counter + action.amount,\r\n      showCounter: state.showCounter,\r\n    };\r\n  }\r\n  if (action.type === \"decrement\") {\r\n    return {\r\n      counter: state.counter - 1,\r\n      showCounter: state.showCounter,\r\n    };\r\n  }\r\n  if (action.type === \"toggle\") {\r\n    return {\r\n      counter: state.counter,\r\n      showCounter: !state.showCounter,\r\n    };\r\n  }\r\n  return state;\r\n};\r\nconst store = createStore({\r\n  counter: counterSlice.reducer,\r\n  auth: authSlice.reducer,\r\n});\r\nexport const counterActions = counterSlice.actions;\r\nexport const authActions = authSlice.actions;\r\nexport default store;\r\n"],"mappings":"AAAA,SAASA,WAAW,QAAQ,OAAO;AACnC,SAASC,WAAW,QAAQ,kBAAkB;AAC9C,MAAMC,mBAAmB,GAAG;EAAEC,OAAO,EAAE,CAAC;EAAEC,WAAW,EAAE;AAAK,CAAC;AAC7D,MAAMC,YAAY,GAAGJ,WAAW,CAAC;EAC/BK,IAAI,EAAE,SAAS;EACfC,YAAY,EAAEL,mBAAmB;EACjCM,QAAQ,EAAE;IACRC,SAASA,CAACC,KAAK,EAAE;MACfA,KAAK,CAACP,OAAO,EAAE;IACjB,CAAC;IACDQ,SAASA,CAACD,KAAK,EAAE;MACfA,KAAK,CAACP,OAAO,EAAE;IACjB,CAAC;IACDS,QAAQA,CAACF,KAAK,EAAEG,MAAM,EAAE;MACtBH,KAAK,CAACP,OAAO,GAAGO,KAAK,CAACP,OAAO,GAAGU,MAAM,CAACC,OAAO;IAChD,CAAC;IACDC,MAAMA,CAACL,KAAK,EAAE;MACZA,KAAK,CAACN,WAAW,GAAG,CAACM,KAAK,CAACN,WAAW;IACxC;EACF;AACF,CAAC,CAAC;AACF,MAAMY,gBAAgB,GAAG;EAAEC,cAAc,EAAE;AAAM,CAAC;AAClD,MAAMC,SAAS,GAAGjB,WAAW,CAAC;EAC5BK,IAAI,EAAE,kBAAkB;EACxBC,YAAY,EAAES,gBAAgB;EAC9BR,QAAQ,EAAE;IACRW,KAAKA,CAACT,KAAK,EAAE;MACXA,KAAK,CAACO,cAAc,GAAG,IAAI;IAC7B,CAAC;IACDG,MAAMA,CAACV,KAAK,EAAE;MACZA,KAAK,CAACO,cAAc,GAAG,KAAK;IAC9B;EACF;AACF,CAAC,CAAC;AACF,MAAMI,cAAc,GAAGA,CAACX,KAAK,GAAGH,YAAY,EAAEM,MAAM,KAAK;EACvD,IAAIA,MAAM,CAACS,IAAI,KAAK,WAAW,EAAE;IAC/B,OAAO;MACLnB,OAAO,EAAEO,KAAK,CAACP,OAAO,GAAG,CAAC;MAC1BC,WAAW,EAAEM,KAAK,CAACN;IACrB,CAAC;EACH;EACA,IAAIS,MAAM,CAACS,IAAI,KAAK,UAAU,EAAE;IAC9B,OAAO;MACLnB,OAAO,EAAEO,KAAK,CAACP,OAAO,GAAGU,MAAM,CAACU,MAAM;MACtCnB,WAAW,EAAEM,KAAK,CAACN;IACrB,CAAC;EACH;EACA,IAAIS,MAAM,CAACS,IAAI,KAAK,WAAW,EAAE;IAC/B,OAAO;MACLnB,OAAO,EAAEO,KAAK,CAACP,OAAO,GAAG,CAAC;MAC1BC,WAAW,EAAEM,KAAK,CAACN;IACrB,CAAC;EACH;EACA,IAAIS,MAAM,CAACS,IAAI,KAAK,QAAQ,EAAE;IAC5B,OAAO;MACLnB,OAAO,EAAEO,KAAK,CAACP,OAAO;MACtBC,WAAW,EAAE,CAACM,KAAK,CAACN;IACtB,CAAC;EACH;EACA,OAAOM,KAAK;AACd,CAAC;AACD,MAAMc,KAAK,GAAGxB,WAAW,CAAC;EACxBG,OAAO,EAAEE,YAAY,CAACoB,OAAO;EAC7BC,IAAI,EAAER,SAAS,CAACO;AAClB,CAAC,CAAC;AACF,OAAO,MAAME,cAAc,GAAGtB,YAAY,CAACuB,OAAO;AAClD,OAAO,MAAMC,WAAW,GAAGX,SAAS,CAACU,OAAO;AAC5C,eAAeJ,KAAK","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}